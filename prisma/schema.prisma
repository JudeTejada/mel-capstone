// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id        String  @id @default(cuid())
    firstName String
    lastName  String
    email     String? @unique
    position  String  @default("")

    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    role            Role      @default(USER)
    password        String
    tasks           Task[]    @relation("TaskAssignees")
    ownedProjects   Project[] @relation("ProjectOwner")
    Comment         Comment[]
    assignedTickets Ticket[]  @relation("TicketAssignee")
}

enum Role {
    ADMIN
    USER
}

enum Status {
    TODO
    INPROGRESS
    COMPLETED
}

enum TaskStatus {
    BACKLOG
    TODO
    INPROGRESS
    COMPLETED
}

enum Priority {
    LOW
    HIGH
    MEDIUM
}

enum ProjectStatus {
    PLANNING
    ACTIVE
    ON_HOLD
    COMPLETED
}

enum TicketType {
    INSTALLATION
    RECTIFICATION
}

enum ProgressStatus {
    IN_PROGRESS
    DONE
    ON_HOLD
}

model Project {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    title       String
    description String
    status      ProjectStatus @default(PLANNING)
    startDate   DateTime
    endDate     DateTime
    priority    Priority
    budget      Float?
    owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
    ownerId     String
    tasks       Task[]
    tags        String[]

    @@index([ownerId])
}

model Task {
    id             String     @id @default(cuid())
    createdAt      DateTime   @default(now())
    title          String
    description    String
    status         TaskStatus @default(BACKLOG)
    assignees      User[]     @relation("TaskAssignees")
    project        Project    @relation(fields: [projectId], references: [id])
    projectId      String
    deadline       DateTime
    priority       Priority
    estimatedHours Float
    actualHours    Float      @default(0)
    comments       Comment[]

    @@index([projectId])
}

model Comment {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    userId    String
    taskId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([taskId])
}

model Ticket {
    id            String         @id @default(cuid())
    type          TicketType
    status        ProgressStatus @default(IN_PROGRESS)
    dateCompleted DateTime?
    remarks       String?        @db.Text
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    assignedTo    User?          @relation("TicketAssignee", fields: [userId], references: [id])
    userId        String?

    // Activity details
    installationProgress InstallationProgress?
    activityType         String?               @db.VarChar(100)

    @@index([userId, status, type])
    @@index([dateCompleted])
}

model InstallationProgress {
    id             String   @id @default(cuid())
    ticket         Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
    ticketId       String   @unique
    poleExcavation Float    @default(0)
    cableLaid      Float    @default(0)
    napLcpMounted  Float    @default(0)
    poleErected    Float    @default(0)
    cableFixed     Float    @default(0)
    napLcpSpliced  Float    @default(0)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}
